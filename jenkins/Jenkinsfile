pipeline {
    agent { 
        node {
            label 'docker-agent-python'
        }
    }

    stages {
        stage('Build') {
            steps {
                echo "Building.."
                echo "BUILD INFO: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)"
                sh '''
                    pip install -r requirements.txt --break-system-packages
                    cd jenkins/myapp
                    pip install -r requirements.txt --break-system-packages
                '''
            }
        }

        stage('Test') {
            steps {
                echo "Testing.."
                sh '''
                    python3 -m pytest
                    python3 -m coverage run -m pytest
                    python3 -m coverage report -m
                '''
            }
        }

        stage('Deliver') {
            steps {
                echo 'Deliver....'
                sh '''
                    echo "doing delivery stuff.."
                '''
            }
        }

        stage('Notify') {
            steps {
                slackSend(message: 'Jenkins pipeline execution completed.', channel: '#emotipress', color: 'good')
            }
        }
    }

    post { 
        always { 
            slackSend(message: 'Post BUILD...', channel: '#emotipress', color: '#339BFF')
        }

        fixed{
            echo 'Build Fixed'
            slackSend(message: 'BUILD Fixed!', channel: '#emotipress', color: 'good')
        }

        regression{
            echo 'Build Broken due to latest changes'
            slackSend(message: 'BUILD Broken!', channel: '#emotipress', color: 'danger')
        }

        aborted{
            echo 'Build Aborted manually'
            slackSend(message: 'BUILD Aborted!', channel: '#emotipress', color: 'warning')
        }

        failure{
            echo 'Build failed'
            slackSend(message: 'BUILD FAILED!', channel: '#emotipress', color: 'danger')
        }

        success{    
            echo 'Build Successful'
            slackSend(message: 'BUILD Successful!', channel: '#emotipress', color: 'good')
        }

        unstable{
            echo 'Build unstable'
            slackSend(message: 'BUILD unstable!', channel: '#emotipress', color: 'danger')
        }

        unsuccessful{
            echo 'Build unsuccessful'
            slackSend(message: 'BUILD unsuccessful!', channel: '#emotipress', color: 'red')
        }

        cleanup{
            echo 'Build Cleaned up'
            sh '''python3 -m coverage erase'''
            slackSend(message: 'BUILD Cleaned up!', channel: '#emotipress', color: 'good')
            slackSend(message:"BUILD INFO: ${env.JOB_NAME} - ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)", channel: '#emotipress', color: '#339BFF')
        }   
    }
}

